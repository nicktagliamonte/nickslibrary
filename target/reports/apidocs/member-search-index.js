memberSearchIndex = [{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"add(int, T)","u":"add(int,T)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"add(List<T>)","u":"add(java.util.List)"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"add(String)","u":"add(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"add(String)","u":"add(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"add(String, int)","u":"add(java.lang.String,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"add(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"add(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"add(T)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"addChild(char)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"addChild(char, String)","u":"addChild(char,java.lang.String)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"addChild(FibonacciHeap.Node<T>)","u":"addChild(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"addEdge(int, int)","u":"addEdge(int,int)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"addEdge(int, int)","u":"addEdge(int,int)"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"addFront(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"addRear(T)"},{"p":"com.nickslibrary.utils.hash","c":"HashFunctions","l":"applyProbing(DynamicArray<HashTable.Entry<K, V>>, int, K, HashTable.ProbingStrategy)","u":"applyProbing(com.nickslibrary.datastructures.linear.DynamicArray,int,K,com.nickslibrary.datastructures.hashing.HashTable.ProbingStrategy)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"AVLTree()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"AVLTreeNode(T)","u":"%3Cinit%3E(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"BinarySearchTree()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"BinaryTreeNode(T)","u":"%3Cinit%3E(T)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode.Color","l":"BLACK"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"BloomFilter(int, int, Function<T, Integer>[])","u":"%3Cinit%3E(int,int,java.util.function.Function[])"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomierFilter","l":"BloomierFilter()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"BTree()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"capacity()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"capacity()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"characterCount()"},{"p":"com.nickslibrary.datastructures.advanced","c":"Rope","l":"charAt(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"CircularQueue(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"clear()"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"clear()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"clear()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"clear()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"clear()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"clear()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"clear()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"clear()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"clear()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"clear()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"clear()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"clone()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"clone()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"color"},{"p":"com.nickslibrary.datastructures.advanced","c":"Rope","l":"concatenate(Rope, Rope)","u":"concatenate(com.nickslibrary.datastructures.advanced.Rope,com.nickslibrary.datastructures.advanced.Rope)"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"connected(int, int)","u":"connected(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"constructFromArray(int[])"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"contains(T)"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"CountMinSketch(int, int)","u":"%3Cinit%3E(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"DancingLinks","l":"DancingLinks(int[][])","u":"%3Cinit%3E(int[][])"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"decreaseKey(FibonacciHeap.Node<T>, T)","u":"decreaseKey(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node,T)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"delete(FibonacciHeap.Node<T>)","u":"delete(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SplayTree","l":"delete(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap","l":"delete(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"delete(String)","u":"delete(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"delete(String)","u":"delete(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"delete(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"delete(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"delete(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"delete(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"deleteAll(Collection<T>)","u":"deleteAll(java.util.Collection)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"depth()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"Deque()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"dequeue()"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"deserialize(byte[])"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"differenceWith(StandardTrie)","u":"differenceWith(com.nickslibrary.datastructures.trees.StandardTrie)"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"DisjointSet(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.ProbingStrategy","l":"DOUBLE_HASHING"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"DynamicArray()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"DynamicArray(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"DynamicArray(List<T>)","u":"%3Cinit%3E(java.util.List)"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"enqueue(T)"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"estimate()"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"estimateCount(String)","u":"estimateCount(java.lang.String)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"extractMax()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"extractMin()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"extractMin()"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"FenwickTree(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"FibonacciHeap()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"find(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"findMax()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"findMax()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"findMax()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"findMin()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"findMin()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"findMin(AVLTreeNode<T>)","u":"findMin(com.nickslibrary.utils.tree.AVLTreeNode)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"fuzzySearch(String, int)","u":"fuzzySearch(java.lang.String,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"get(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"get(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"get(int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"get(K)"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"get(Key)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomierFilter","l":"get(String)","u":"get(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"get(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"get(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"get(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"getAllWords()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"getAllWords()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"getAllWordsByFrequency()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"getAllWordsSorted()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"getBalanceFactor()"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"getBitSetSize()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getChild()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"getChild(char)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"getChild(char)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"getChildren()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"getChildren()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"getColor()"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"getCount()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getDegree()"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"getDepth()"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"getElementCount()"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"getExpectedNumberOfElements()"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"getFalsePositiveProbability()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"getFrequency()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"getFrequency()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"getFrequency(String)","u":"getFrequency(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"getHeight()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"getHeight()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"getHeight()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"getLeft()"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"getLeft()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"getLeft()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"getLinearTable()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"getLinkedTable()"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"getNeighbors(int)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"getNeighbors(int)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getNext()"},{"p":"com.nickslibrary.utils.hash","c":"HashFunctions","l":"getNextIndex(DynamicArray<HashTable.Entry<K, V>>, int, HashTable.ProbingStrategy, int, K)","u":"getNextIndex(com.nickslibrary.datastructures.linear.DynamicArray,int,com.nickslibrary.datastructures.hashing.HashTable.ProbingStrategy,int,K)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"getNode(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"getNode(T)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"getNumHashFunctions()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getParent()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"getParent()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"getParent()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"getParent()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"getPrefix()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getPrev()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"getProbingStrategy()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"getResolutionStrategy()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"getRight()"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"getRight()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"getRight()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"getRoot()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"getSize()"},{"p":"com.nickslibrary.datastructures.advanced","c":"DancingLinks","l":"getSolutionCount()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"getValue()"},{"p":"com.nickslibrary.utils.tree","c":"TreeNode","l":"getValue()"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"getWidth()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"getWordsWithPrefix(String)","u":"getWordsWithPrefix(java.lang.String)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"GraphAdjList(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"GraphAdjMatrix(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.utils.graph","c":"GraphNode","l":"GraphNode()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"hasChild(char)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"hasChild(char)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"hasEdge(int, int)","u":"hasEdge(int,int)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"hasEdge(int, int)","u":"hasEdge(int,int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"hash(K)"},{"p":"com.nickslibrary.utils.hash","c":"HashFunctions","l":"hash(K, int)","u":"hash(K,int)"},{"p":"com.nickslibrary.utils.hash","c":"HashFunctions","l":"HashFunctions()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"HashTable(int, HashTable.CollisionResolution)","u":"%3Cinit%3E(int,com.nickslibrary.datastructures.hashing.HashTable.CollisionResolution)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"HashTable(int, HashTable.CollisionResolution, HashTable.ProbingStrategy)","u":"%3Cinit%3E(int,com.nickslibrary.datastructures.hashing.HashTable.CollisionResolution,com.nickslibrary.datastructures.hashing.HashTable.ProbingStrategy)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"hasPrefix(String)","u":"hasPrefix(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"hasPrefix(String)","u":"hasPrefix(java.lang.String)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"head"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"height"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"height()"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"HyperLogLog(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"incrementFrequency()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"incrementFrequency()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"incrementFrequency(String)","u":"incrementFrequency(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SplayTree","l":"inorder()"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap","l":"inorder(Consumer<Treap.Node>)","u":"inorder(java.util.function.Consumer)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"inorderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"inOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"inOrderTraversal()"},{"p":"com.nickslibrary.datastructures.advanced","c":"QuadTree","l":"insert(double, double)","u":"insert(double,double)"},{"p":"com.nickslibrary.datastructures.advanced","c":"OctTree","l":"insert(double, double, double)","u":"insert(double,double,double)"},{"p":"com.nickslibrary.datastructures.advanced","c":"KdTree","l":"insert(double...)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SplayTree","l":"insert(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap","l":"insert(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"insert(int, T)","u":"insert(int,T)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"insert(String)","u":"insert(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"insert(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"insertAll(Collection<T>)","u":"insertAll(java.util.Collection)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"insertAll(T[])"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"insertAll(T[])"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"intersectWith(StandardTrie)","u":"intersectWith(com.nickslibrary.datastructures.trees.StandardTrie)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"isBlack()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"isCircular"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"isEmpty()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"isEmpty()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"isEndOfWord()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"isEndOfWord()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"isFull()"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"isLeaf()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"isLeaf()"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"isLeaf()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"isMarked()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"isRed()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"isSinglyLinked"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"isValidRedBlackTree()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"iterator()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"iterator()"},{"p":"com.nickslibrary.datastructures.advanced","c":"KdTree","l":"KdTree(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.Entry","l":"key"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap.Node","l":"key"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"left"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"left"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"levelOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"levelOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"levelOrderTraversal()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.ProbingStrategy","l":"LINEAR_PROBING"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"LinkedList(boolean, boolean)","u":"%3Cinit%3E(boolean,boolean)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SuffixTree","l":"longestCommonSubstring(String, String)","u":"longestCommonSubstring(java.lang.String,java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"longestPrefixMatch(String)","u":"longestPrefixMatch(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SuffixTree","l":"longestRepeatedSubstring()"},{"p":"com.nickslibrary","c":"Main","l":"Main()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary","c":"Main","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"MaxHeap(Collection<T>)","u":"%3Cinit%3E(java.util.Collection)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"MaxHeap(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"merge(CountMinSketch)","u":"merge(com.nickslibrary.datastructures.advanced.CountMinSketch)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"merge(FibonacciHeap<T>)","u":"merge(com.nickslibrary.datastructures.heaps.FibonacciHeap)"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"merge(HyperLogLog)","u":"merge(com.nickslibrary.datastructures.advanced.HyperLogLog)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"mergeWith(StandardTrie)","u":"mergeWith(com.nickslibrary.datastructures.trees.StandardTrie)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"mightContain(T)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"MinHeap(Collection<T>)","u":"%3Cinit%3E(java.util.Collection)"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"MinHeap(int)","u":"%3Cinit%3E(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList.Node","l":"next"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"Node(T)","u":"%3Cinit%3E(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"nodeCount()"},{"p":"com.nickslibrary.datastructures.advanced","c":"OctTree","l":"OctTree(double, double, double, double, int)","u":"%3Cinit%3E(double,double,double,double,int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.CollisionResolution","l":"OPEN_ADDRESSING"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomFilter","l":"optimalNumOfHashFunctions(int, int)","u":"optimalNumOfHashFunctions(int,int)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"parent"},{"p":"com.nickslibrary.datastructures.heaps","c":"MaxHeap","l":"peek()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"peek()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"peek()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"peek()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"peek()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"peekFront()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap","l":"peekMin()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"peekRear()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"pop()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"pop()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"postorderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"postOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"postOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"predecessor(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"preorderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"preOrderTraversal()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"preOrderTraversal()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"printDeque()"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"printGraph()"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"printGraph()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"printList()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"printList()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"printQueue()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"printStack()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"printStack()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SuffixTree","l":"printTree()"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"printTrie()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"printTrie()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"push(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"push(T)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"put(K, V)","u":"put(K,V)"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"put(Key, Value)","u":"put(Key,Value)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.ProbingStrategy","l":"QUADRATIC_PROBING"},{"p":"com.nickslibrary.datastructures.advanced","c":"QuadTree","l":"QuadTree(double, double, double, double, int)","u":"%3Cinit%3E(double,double,double,double,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"OctTree","l":"query(double, double, double, double)","u":"query(double,double,double,double)"},{"p":"com.nickslibrary.datastructures.advanced","c":"QuadTree","l":"query(double, double, double, double)","u":"query(double,double,double,double)"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"query(int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SegmentTree","l":"query(int, int)","u":"query(int,int)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"RadixTrie()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"RadixTrieNode()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"RadixTrieNode(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"rangeQuery(int, int)","u":"rangeQuery(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"KdTree","l":"rangeSearch(double[], double[])","u":"rangeSearch(double[],double[])"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode.Color","l":"RED"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"RedBlackTree()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"RedBlackTreeNode(T)","u":"%3Cinit%3E(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"regexSearch(String)","u":"regexSearch(java.lang.String)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"remove(int)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable","l":"remove(K)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"remove(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"removeAt(int)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"removeChild(char)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"removeChild(char)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"removeChild(FibonacciHeap.Node<T>)","u":"removeChild(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjList","l":"removeEdge(int, int)","u":"removeEdge(int,int)"},{"p":"com.nickslibrary.datastructures.graphs","c":"GraphAdjMatrix","l":"removeEdge(int, int)","u":"removeEdge(int,int)"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"removeFront()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"removeRear()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"replaceWord(String, String)","u":"replaceWord(java.lang.String,java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"CountMinSketch","l":"reset()"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"reset()"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"reset()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"resize()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"reverse()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"reverse()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"right"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"right"},{"p":"com.nickslibrary.datastructures.advanced","c":"Rope","l":"Rope(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"KdTree","l":"search(double...)"},{"p":"com.nickslibrary.datastructures.advanced","c":"DancingLinks","l":"search(int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SplayTree","l":"search(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap","l":"search(int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SuffixTree","l":"search(String)","u":"search(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"search(String)","u":"search(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"search(String)","u":"search(java.lang.String)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"search(T)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"search(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"search(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"search(T)"},{"p":"com.nickslibrary.utils.hash","c":"HashFunctions","l":"secondaryHash(K, int)","u":"secondaryHash(K,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SegmentTree","l":"SegmentTree(int[])","u":"%3Cinit%3E(int[])"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.CollisionResolution","l":"SEPARATE_CHAINING"},{"p":"com.nickslibrary.datastructures.advanced","c":"HyperLogLog","l":"serialize()"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"set(int, int)","u":"set(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"BloomierFilter","l":"set(String, int)","u":"set(java.lang.String,int)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setBlack()"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setChild(FibonacciHeap.Node<T>)","u":"setChild(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setColor(RedBlackTreeNode.Color)","u":"setColor(com.nickslibrary.utils.tree.RedBlackTreeNode.Color)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setDegree(int)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"setEndOfWord(boolean)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"setEndOfWord(boolean)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"setFrequency(int)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"setFrequency(int)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"setFrequency(String, int)","u":"setFrequency(java.lang.String,int)"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"setHeight(int)"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"setLeft(AVLTreeNode<T>)","u":"setLeft(com.nickslibrary.utils.tree.AVLTreeNode)"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"setLeft(BinaryTreeNode<T>)","u":"setLeft(com.nickslibrary.utils.tree.BinaryTreeNode)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setLeft(RedBlackTreeNode<T>)","u":"setLeft(com.nickslibrary.utils.tree.RedBlackTreeNode)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setMarked(boolean)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setNext(FibonacciHeap.Node<T>)","u":"setNext(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setParent(FibonacciHeap.Node<T>)","u":"setParent(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"setParent(RadixTrieNode)","u":"setParent(com.nickslibrary.utils.tree.RadixTrieNode)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setParent(RedBlackTreeNode<T>)","u":"setParent(com.nickslibrary.utils.tree.RedBlackTreeNode)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"setParent(TrieNode)","u":"setParent(com.nickslibrary.utils.tree.TrieNode)"},{"p":"com.nickslibrary.utils.tree","c":"RadixTrieNode","l":"setPrefix(String)","u":"setPrefix(java.lang.String)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setPrev(FibonacciHeap.Node<T>)","u":"setPrev(com.nickslibrary.datastructures.heaps.FibonacciHeap.Node)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setRed()"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"setRight(AVLTreeNode<T>)","u":"setRight(com.nickslibrary.utils.tree.AVLTreeNode)"},{"p":"com.nickslibrary.utils.tree","c":"BinaryTreeNode","l":"setRight(BinaryTreeNode<T>)","u":"setRight(com.nickslibrary.utils.tree.BinaryTreeNode)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode","l":"setRight(RedBlackTreeNode<T>)","u":"setRight(com.nickslibrary.utils.tree.RedBlackTreeNode)"},{"p":"com.nickslibrary.datastructures.heaps","c":"FibonacciHeap.Node","l":"setValue(T)"},{"p":"com.nickslibrary.utils.tree","c":"TreeNode","l":"setValue(T)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"shortestPrefixMatch(String)","u":"shortestPrefixMatch(java.lang.String)"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"shrinkToFit()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"shrinkToFit()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"size()"},{"p":"com.nickslibrary.datastructures.heaps","c":"MinHeap","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"CircularQueue","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"size()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"size()"},{"p":"com.nickslibrary.datastructures.trees","c":"AVLTree","l":"size()"},{"p":"com.nickslibrary.datastructures.trees","c":"BinarySearchTree","l":"size()"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"size()"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"size()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"size()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SkipList","l":"SkipList()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.advanced","c":"SplayTree","l":"SplayTree()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.advanced","c":"Rope","l":"split(int)"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"StackArray()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"StackLinkedList()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"StandardTrie()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"startsWith(String)","u":"startsWith(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"RedBlackTree","l":"successor(T)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SuffixTree","l":"SuffixTree(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"suggest(String, int)","u":"suggest(java.lang.String,int)"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"tail"},{"p":"com.nickslibrary.datastructures.linear","c":"Deque","l":"toArray()"},{"p":"com.nickslibrary.datastructures.linear","c":"LinkedList","l":"toArray()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackArray","l":"toArray()"},{"p":"com.nickslibrary.datastructures.linear","c":"StackLinkedList","l":"toArray()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"toDictionaryFormat()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"toSerializedFormat()"},{"p":"com.nickslibrary.datastructures.advanced","c":"Rope","l":"toString()"},{"p":"com.nickslibrary.datastructures.linear","c":"DynamicArray","l":"toString()"},{"p":"com.nickslibrary.datastructures.trees","c":"BTree","l":"toString()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"totalWordInstances()"},{"p":"com.nickslibrary.datastructures.trees","c":"Treap","l":"Treap()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.utils.tree","c":"TreeNode","l":"TreeNode(T)","u":"%3Cinit%3E(T)"},{"p":"com.nickslibrary.utils.tree","c":"TrieNode","l":"TrieNode()","u":"%3Cinit%3E()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"trim()"},{"p":"com.nickslibrary.datastructures.graphs","c":"DisjointSet","l":"union(int, int)","u":"union(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"FenwickTree","l":"update(int, int)","u":"update(int,int)"},{"p":"com.nickslibrary.datastructures.advanced","c":"SegmentTree","l":"update(int, int)","u":"update(int,int)"},{"p":"com.nickslibrary.utils.tree","c":"AVLTreeNode","l":"updateHeight()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.Entry","l":"value"},{"p":"com.nickslibrary.utils.tree","c":"TreeNode","l":"value"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.CollisionResolution","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.ProbingStrategy","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode.Color","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.CollisionResolution","l":"values()"},{"p":"com.nickslibrary.datastructures.hashing","c":"HashTable.ProbingStrategy","l":"values()"},{"p":"com.nickslibrary.utils.tree","c":"RedBlackTreeNode.Color","l":"values()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"wildcardSearch(String)","u":"wildcardSearch(java.lang.String)"},{"p":"com.nickslibrary.datastructures.trees","c":"RadixTrie","l":"wordCount()"},{"p":"com.nickslibrary.datastructures.trees","c":"StandardTrie","l":"wordCount()"}];updateSearchResults();